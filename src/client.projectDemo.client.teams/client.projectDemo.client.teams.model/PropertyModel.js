/**
 * testCenter
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RestrictModel from './RestrictModel';

/**
 * The PropertyModel model module.
 * @module client.projectDemo.client.teams/client.projectDemo.client.teams.model/PropertyModel
 * @version 1.0.0
 */
class PropertyModel {
    /**
     * Constructs a new <code>PropertyModel</code>.
     * @alias module:client.projectDemo.client.teams/client.projectDemo.client.teams.model/PropertyModel
     * @param name {String} 
     * @param type {module:client.projectDemo.client.teams/client.projectDemo.client.teams.model/PropertyModel.TypeEnum} 
     * @param docIdPart {Boolean} 
     * @param required {Boolean} 
     * @param enable {Boolean} 
     */
    constructor(name, type, docIdPart, required, enable) { 
        
        PropertyModel.initialize(this, name, type, docIdPart, required, enable);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type, docIdPart, required, enable) { 
        obj['name'] = name;
        obj['type'] = type;
        obj['docIdPart'] = docIdPart;
        obj['required'] = required;
        obj['enable'] = enable;
    }

    /**
     * Constructs a <code>PropertyModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:client.projectDemo.client.teams/client.projectDemo.client.teams.model/PropertyModel} obj Optional instance to populate.
     * @return {module:client.projectDemo.client.teams/client.projectDemo.client.teams.model/PropertyModel} The populated <code>PropertyModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropertyModel();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('alias')) {
                obj['alias'] = ApiClient.convertToType(data['alias'], 'String');
            }
            if (data.hasOwnProperty('restrict')) {
                obj['restrict'] = RestrictModel.constructFromObject(data['restrict']);
            }
            if (data.hasOwnProperty('docIdPart')) {
                obj['docIdPart'] = ApiClient.convertToType(data['docIdPart'], 'Boolean');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('enable')) {
                obj['enable'] = ApiClient.convertToType(data['enable'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PropertyModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PropertyModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PropertyModel.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['alias'] && !(typeof data['alias'] === 'string' || data['alias'] instanceof String)) {
            throw new Error("Expected the field `alias` to be a primitive type in the JSON string but got " + data['alias']);
        }
        // validate the optional field `restrict`
        if (data['restrict']) { // data not null
          RestrictModel.validateJSON(data['restrict']);
        }

        return true;
    }


}

PropertyModel.RequiredProperties = ["name", "type", "docIdPart", "required", "enable"];

/**
 * @member {String} name
 */
PropertyModel.prototype['name'] = undefined;

/**
 * @member {module:client.projectDemo.client.teams/client.projectDemo.client.teams.model/PropertyModel.TypeEnum} type
 */
PropertyModel.prototype['type'] = undefined;

/**
 * @member {String} alias
 */
PropertyModel.prototype['alias'] = undefined;

/**
 * @member {module:client.projectDemo.client.teams/client.projectDemo.client.teams.model/RestrictModel} restrict
 */
PropertyModel.prototype['restrict'] = undefined;

/**
 * @member {Boolean} docIdPart
 */
PropertyModel.prototype['docIdPart'] = undefined;

/**
 * @member {Boolean} required
 */
PropertyModel.prototype['required'] = undefined;

/**
 * @member {Boolean} enable
 */
PropertyModel.prototype['enable'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PropertyModel['TypeEnum'] = {

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT",

    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",

    /**
     * value: "NUMBER"
     * @const
     */
    "NUMBER": "NUMBER",

    /**
     * value: "BOOL"
     * @const
     */
    "BOOL": "BOOL"
};



export default PropertyModel;

